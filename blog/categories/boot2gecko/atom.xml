<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Boot2Gecko | My Octopress Blog]]></title>
  <link href="http://fusion94.github.io/blog/categories/boot2gecko/atom.xml" rel="self"/>
  <link href="http://fusion94.github.io/"/>
  <updated>2013-11-12T16:45:45-08:00</updated>
  <id>http://fusion94.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building B2G (Boot2Gecko) on OSX]]></title>
    <link href="http://fusion94.github.io/blog/2013/01/09/building-b2g-boot2gecko-on-osx/"/>
    <updated>2013-01-09T10:37:00-08:00</updated>
    <id>http://fusion94.github.io/blog/2013/01/09/building-b2g-boot2gecko-on-osx</id>
    <content type="html"><![CDATA[<p>So I&rsquo;ve been interested in the <a href="https://wiki.mozilla.org/B2G">Boot2Gecko</a> project for awhile and wanted to see if I could get an app running on <a href="http://www.appgyver.com/steroids">Steroids</a> that would run under B2G.</p>

<p>To accomplish this I needed to get the B2G desktop emulator up and running so I could actually develop something.</p>

<p>Below is the method I had to use to get it up and running with OSX (Mountain Lion).</p>

<!-- more -->


<h2>Prerequisites</h2>

<p>You will need the following installed to get started.</p>

<ul>
<li>Git</li>
<li>Brew</li>
<li>Autoconf</li>
<li>Yasm</li>
</ul>


<p>For this to build properly you&rsquo;re going to have to force <code>brew</code> to download and install <code>autoconf-2.13</code>. This can be accomplished by placing the <code>autoconf.rb</code> code listed below into your Formula folder located at <code>/usr/local/Library/Formula/</code>.</p>

<p>{% codeblock autoconf.rb lang:ruby %}
require &lsquo;formula&rsquo;</p>

<p>class Autoconf &lt; Formula
  url &lsquo;<a href="http://ftp.gnu.org/gnu/autoconf/autoconf-2.13.tar.gz">http://ftp.gnu.org/gnu/autoconf/autoconf-2.13.tar.gz</a>&rsquo;
  homepage &lsquo;<a href="http://www.gnu.org/software/autoconf/">http://www.gnu.org/software/autoconf/</a>&rsquo;
  md5 &lsquo;9de56d4a161a723228220b0f425dc711&rsquo;`</p>

<p>  def install</p>

<pre><code>system "./configure", "--program-suffix=213",
                      "--prefix=#{prefix}",
                      "--infodir=#{info}"
system "make install"
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>Once this is accomplished just use <code>brew</code> to install both <code>autoconf</code> and <code>yasm</code></p>

<p>{% codeblock Installing prerequisites using brew %}
brew install autoconf</p>

<p>brew install yasm
{% endcodeblock %}</p>

<h2>Getting the code</h2>

<p>There are two different pieces needed to get the desktop emulator up and running. First there is Mozilla-central. This will contain the b2g executable. The second component needed is gaia. This is the user interface for the b2g phone.</p>

<p>{% codeblock Getting the code %}
// Get mozilla-central repo and save it to folder called mozilla-central
git clone <a href="https://github.com/mozilla/mozilla-central.git">https://github.com/mozilla/mozilla-central.git</a></p>

<p>// Get gaia repo and save to folder called gaia
git clone <a href="https://github.com/mozilla-b2g/gaia.git">https://github.com/mozilla-b2g/gaia.git</a> gaia
{% endcodeblock %}</p>

<h2>Building Mozilla Central</h2>

<p><strong>Create a mozconfig</strong></p>

<p>You will need to create a mozconfig file before building. cd into the mozilla-central directory and create a file called “mozconfig”. Then add the following to it and save.</p>

<p>{% codeblock mozconfig %}
mk_add_options MOZ_OBJDIR=../build
mk_add_options MOZ_MAKE_FLAGS=&ldquo;-j9 -s&rdquo;</p>

<p>ac_add_options &mdash;enable-application=b2g
ac_add_options &mdash;disable-libjpeg-turbo</p>

<h1>This option is required if you want to be able to run Gaia&rsquo;s tests</h1>

<p>ac_add_options &mdash;enable-tests</p>

<h1>turn on mozTelephony/mozSms interfaces</h1>

<p>ac_add_options &mdash;enable-b2g-ril
{% endcodeblock %}</p>

<p><strong>Build</strong></p>

<p>While still in the mozilla-central directory build the source code. Now go get a beer or some coffee as this will take a long time.</p>

<p>{% codeblock Building Mozilla Central %}
make -f client.mk build
{% endcodeblock %}</p>

<p>When complete you should see a build folder outside of your mozilla-central directory.</p>

<h2>Building Gaia</h2>

<p>Now that we have mozilla-central working we need to build a profile for gaia. Navigate into the gaia directory that was created when doing a git clone from above. Now we can build with the following command.</p>

<p>{% codeblock Building Gaia %}
make
{% endcodeblock %}</p>

<p>A lot of stuff will happen but if everything works out you should have a “profile” folder in your gaia directory.</p>

<h2>Running the emulator</h2>

<p>To run thhe b2g emulator you&rsquo;re going to need to pass in the profile generated in the gaia folder.</p>

<p>{% codeblock Running the Emulator %}
cd build/dist/B2G.app/Contents/MacOS/</p>

<p>./b2g -profile /path/to/gaia/profile
{% endcodeblock %}</p>

<h2>Conclusion</h2>

<p>It really wasn&rsquo;t that hard to get this up and running under OSX. In a future blog post I&rsquo;ll discuss getting a <a href="http://www.appgyver.com/steroids">Steroids</a> application un and running under B2G but for now here are a few screenshots.</p>

<p><strong>B2G Lock Screen</strong></p>

<p>{% img /images/blog/b2g-1/b2g_lock_screen.png %}</p>

<p><strong>B2G Home Screen</strong></p>

<p>{% img /images/blog/b2g-1/b2g_home_screen.png %}</p>

<p><strong>B2G Marketplace</strong></p>

<p>{% img /images/blog/b2g-1/b2g_marketplace.png %}</p>
]]></content>
  </entry>
  
</feed>
