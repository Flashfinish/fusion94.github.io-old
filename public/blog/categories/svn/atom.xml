<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: SVN | Tony Guntharp]]></title>
  <link href="http://fusion94.org/blog/categories/svn/atom.xml" rel="self"/>
  <link href="http://fusion94.org/"/>
  <updated>2015-09-09T13:58:54-07:00</updated>
  <id>http://fusion94.org/</id>
  <author>
    <name><![CDATA[fusion94]]></name>
    <email><![CDATA[fusion94@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SVN Repository Cleanup]]></title>
    <link href="http://fusion94.org/blog/2008/12/20/svn-repository-cleanup/"/>
    <updated>2008-12-20T22:25:00-08:00</updated>
    <id>http://fusion94.org/blog/2008/12/20/svn-repository-cleanup</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve spent the past few hours doing some pretty massive SVN repository cleanup for all of my personal projects. One annoyance is all of the .svn directories that occasionally have to be located and removed before you can recommit.</p>

<p>Here&rsquo;s a quick one-liner to assist you in this. Let&rsquo;s say you have a couple of top level directories that look something like this:</p>

<pre>
foo/
   bar/
bar/
   foo/
</pre>


<p>If you want to find and remove all those pesky .svn directories from within the foo directory all you need to do is run this:</p>

<p><code>find foo -type d -name &ldquo;.svn&rdquo; -exec rm -rf {} \;</code></p>

<p>If you wanted to hit both directories at the same time you use this:</p>

<p><code>find * -type d -name &ldquo;.svn&rdquo; -exec rm -rf {} \;</code></p>

<p>Also to note is that you can use this to also locate and remove .DS_Store files that OSX places all over the place. The only difference is that the flag passed to -type would now be a &lsquo;f&rsquo; like this:</p>

<p><code>find foo -type f -name &ldquo;.DS_Store&rdquo; -exec rm -rf {} \;</code></p>

<p>Hope this is useful to someone.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zend Framework and svn:externals]]></title>
    <link href="http://fusion94.org/blog/2008/12/17/zend-framework-and-svn-externals/"/>
    <updated>2008-12-17T23:41:00-08:00</updated>
    <id>http://fusion94.org/blog/2008/12/17/zend-framework-and-svn-externals</id>
    <content type="html"><![CDATA[<p>The majority of the work I&rsquo;ve been involved with at <a href="http://www.skyfire.com">Skyfire</a> has involved the <a href="http://framework.zend.com/">Zend Framework</a>. When I first got there they were downloading the latest copy from the Zend website and checking into their repository.</p>

<p>I had used svn:externals quite a bit while at <a href="http://contentcircles.com">Content Circles</a> to pull down vendor branches and decided to re-implement this at <a href="http://www.skyfire.com">Skyfire</a>.</p>

<p>In case you aren&rsquo;t aware of <a href="http://svnbook.red-bean.com/nightly/en/svn-book.html#svn.advanced.externals">svn:externals</a> here&rsquo;s a bit of a description.</p>

<blockquote><p>An externals definition is a mapping of a local directory to the URL—and ideally a particular revision—of a versioned directory. In Subversion, you declare externals definitions in groups using the svn:externals property. You can create or modify this property using svn propset or svn propedit. It can be set on any versioned directory, and its value describes both the external repository location and the client-side directory to which that location should be checked out.</p>

<p>The convenience of the svn:externals property is that once it is set on a versioned directory, everyone who checks out a working copy with that directory also gets the benefit of the externals definition. In other words, once one person has made the effort to define the nested working copy structure, no one else has to bother—Subversion will, after checking out the original working copy, automatically also check out the external working copies.</p></blockquote>

<p>To implement this is fairly easy and straightforward. Lets say that we have two (2) Zend Framework projects that we want to implement this with and our project repository layout looks like this:</p>

<pre>code/
    branches/
        reporting/
            application/
            library/
            web/
        corporate/
            application/
            library/
            web/
    tags/
    trunk/
</pre>




<ol>
<li>Navigate to the top level of the branches directory and run:

<code>svn propedit svn:externals reporting/library/.</code>

<li>This will open an editor session. To pull in the external revision of Zend Framework just type in:

<code>Zend http://framework.zend.com/svn/framework/standard/tags/release-1.7.1/library/Zend/</code>

<li>Save and exit.
<li>Now update the repository and commit:
<code>svn update
svn commit
</code>
</ol>


<p>Now our project repository will look something like this:</p>

<pre>code/
    branches/
        reporting/
            application/
            library/
                Zend/
            web/
        corporate/
            application/
            library/
            web/
    tags/
    trunk/
</pre>


<p>With the tagged release of the 1.7.1 version of Zend Framework nestled inside the library directory of the reporting branch.</p>

<p>Also to note is that using this method you can set different branches to pull in different versions of the Zend Framework for production or legacy sake. For example the reporting branch pulls down the 1.7.1 version for use but we could pull in the 1.0.1 version for the corporate branch by executing this:</p>

<ol>
<li>Navigate to the top level of the branches directory and run:

<code>svn propedit svn:externals corporate/library/.</code>

<li>This will open an editor session. To pull in the external revision of Zend Framework just type in:

<code>Zend http://framework.zend.com/svn/framework/standard/tags/release-1.0.1/library/Zend/</code>

<li>Save and exit.
<li>Now update the repository and commit:
<code>svn update
svn commit
</code>
</ol>


<p>We now have Zend Framework 1.0.1 pulled down for use for the corporate branch.</p>

<p>If you ever get confused as to which version you&rsquo;ve got pulled down you can just open up Zend/Version.php and take a look at the <code>const VERSION = &ldquo;x.x.x &rdquo;;</code> string.</p>
]]></content>
  </entry>
  
</feed>
